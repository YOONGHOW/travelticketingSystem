@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<Attraction>
@{
	string[] fields = ["Attraction ID", "Attraction Name", "Attraction Type", "Location"];
}

				@Model.Count() of @Model.TotalItemCount record(s) |
				Page @Model.PageNumber of @Model.PageCount
				<br />
<table>
	<thead>
		<tr>
			@foreach (var f in fields)
			{
				string d = "asc";
				string c = "";

				if (f == ViewBag.ASort)
				{
					d = ViewBag.ADir == "des" ? "asc" : "des";
					c = ViewBag.ADir;
				}

				<th>
					<a data-ajax="true"
					   data-ajax-update="#target"
					   data-ajax-loading="#loader"
					   href="?Aname=@ViewBag.aname&Asort=@f&Adir=@d" class="@c">@f</a>
				</th>
			}
			<th colspan="3" style="text-align:center;">Action</th>
		</tr>
	</thead>
	<tbody>
		@if (Model.Count == 0)
		{
			<tr><td colspan="6" style="text-align:center;">No record found.</td></tr>
		}
		@foreach (var a in Model)
		{
			<tr>
				<td>@a.Id</td>
				<td>@a.Name</td>
				<td>@a.AttractionType?.Name</td>
				<td>@a.Location</td>
				<td style="text-align:center;"><button class="update" data-get="/Admin/AdminAttractionUpdate/@a.Id">Update</button></td>
				<td style="text-align:center;"><button class="delete" data-get="/Admin/AdminAttractionDelete/@a.Id">Delete</button></td>
			</tr>
		}

	</tbody>
</table>
@{
	var options = PagedListRenderOptions.ClassicPlusFirstAndLast;
	options.LinkToFirstPageFormat = "First";
	options.LinkToLastPageFormat = "Last";
	options.LinkToPreviousPageFormat = "Previous";
	options.LinkToNextPageFormat = "Next";

	var ajaxOptions = new AjaxOptions
			{
				HttpMethod = "get",
				UpdateTargetId = "target",
				LoadingElementId = "#loader",
			};
}

@Html.PagedListPager(Model, page => $"?Apage={page}", PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(options, ajaxOptions))







