@model AttractionUpdateVM

<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="/css/AdminCss/AdminAttractionTypeLayout.css">
	<title>Update Attraction Information</title>

</head>

<body>
	<div class="container">
		<div class="header">
			<a href="/Admin/AdminAttraction" class="back-arrow"><img src="/images/back-arrow.png" alt="Back"></a>
			<div class="title">Update Attraction</div>
		</div>

		<div class="content">
			<form method="post" enctype="multipart/form-data">
				<div asp-validation-summary="ModelOnly"></div>

				<label asp-for="Photo.images">Attraction Image</label>
				<label class="upload">
					<input asp-for="Photo.images" id="fileInput" accept="image/jpeg,image/png" multiple hidden>
					<div id="imageList">
						@foreach (var imagePath in Model.Photo.imagePaths)
						{
							<div>
								<img src="/attractionImages/@imagePath" class="drag">
								@* <button type="button" name="imagePath" class="delete-btn" data-post="@imagePath">Remove</button> *@
							</div>
						}
					</div>
					<div id="preview"></div>
					<div id="errorMessage" class="error"></div>
				</label>
				<span asp-validation-for="Photo.images" class="err" style="text-align:center;"></span>

				<div class="product-details">
					<div class="input-box">
						<label class="details" asp-for="Id">Attraction Id</label>
						<input asp-for="Id" readonly style="caret-color: transparent;color:#797777">
						<span asp-validation-for="Id"></span>
					</div>
					<div class="input-box"></div>
					<div class="input-box">
						<label class="details" asp-for="Name">Attraction Name</label>
						<input asp-for="Name">
						<span asp-validation-for="Name"></span>
					</div>

					<div class="input-box">
						<label class="details" asp-for="AttractionTypeId">Attraction Type Name</label>
						<select id="attraction-type" asp-for="AttractionTypeId">
							<option value="none">-- Select Attraction Type --</option>
							@foreach (var at in ViewBag.AttractionTypes)
							{
								<option value="@at.Id">@at.Name</option>
								<span>Remove</span>
							}
						</select>
						<span asp-validation-for="AttractionTypeId"></span>
					</div>

					<div class="input-box">
						<label class="details" asp-for="Description">Description</label>
						<textarea asp-for="Description" rows="5"></textarea>
						<span asp-validation-for="Description"></span>
					</div>

					<!-- Map container -->
					<div id="mapContainer" style="width: 100%; height: 400px;"></div>

					<div class="input-box">
						<label class="details" asp-for="Location">Location</label>
						<textarea asp-for="Location" rows="3"></textarea>
						<button type="button" id="searchButton">Search Location</button>
						<span asp-validation-for="Location"></span>
					</div>
				</div>

				<div class="operating-hours">
					<h3>Operating Hours</h3>
					<div class="button">
						<button type="button" id="syncStartTimeButton">Sync Start Times</button>
					</div>
					<div class="button">
						<button type="button" id="syncEndTimeButton">Sync End Times</button>
					</div>
					<div class="day-hours">
						@{
							var days = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
						}

						@for (int i = 0; i < days.Length; i++)
						{
							<div class="day-row">
								<span>@days[i]</span>
								<input type="hidden" asp-for="operatingHours[@i].Day" value="@days[i]" class="day-status" />
								<select asp-for="operatingHours[@i].Status" class="day-status">
									<option value="open">Open</option>
									<option value="closed">Closed</option>
								</select>
								<input type="time" asp-for="operatingHours[@i].StartTime" class="time-input start-time" placeholder="Start Time">
								<input type="time" asp-for="operatingHours[@i].EndTime" class="time-input end-time" placeholder="End Time">
							</div>
							<span class="err" asp-validation-for="operatingHours[@i]"></span>
						}
					</div>
				</div>

				<div class="button">
					<button id="addCategoryButton">Update Attraction</button>
				</div>
			</form>
		</div>
	</div>

	<script src="/js/jquery.min.js"></script>
	<script src="/js/jquery.unobtrusive-ajax.min.js"></script>
	<script src="/js/jquery.validate.min.js"></script>
	<script src="/js/jquery.validate.unobtrusive.min.js"></script>
	<script src="~/js/app.js" asp-append-version="true"></script>

	<script>
		const fileInput = document.getElementById('fileInput');
		const preview = document.getElementById('preview');
		const errorMessage = document.getElementById('errorMessage');
		const maxFileSize = 2 * 1024 * 1024; // 2MB
		const maxImages = 5;

		fileInput.addEventListener('change', () => {
			preview.innerHTML = ''; // Clear previous previews
			errorMessage.innerHTML = ''; // Clear error message
			const files = fileInput.files;

			// Create an array to hold the files excluding the ones that are removed
			let fileArray = Array.from(files);

			// Check number of images validation
			if (fileArray.length > maxImages) {
				errorMessage.innerHTML = `You can only upload up to ${maxImages} images.`;
				return;
			}else if(fileArray.length >= 1){
				document.getElementById("imageList").style.display = "none";

						fileArray.forEach((file) => {
			// Check file size validation
			if (file.size > maxFileSize) {
				errorMessage.innerHTML = `File "${file.name}" is too large. Maximum allowed size is 2MB.`;
				return;
			}

			const reader = new FileReader();
			reader.onload = (e) => {
				const div = document.createElement('div');
				const img = document.createElement('img');
				img.src = e.target.result;
				div.appendChild(img);

				// Create a remove button
				const removeBtn = document.createElement('span');
				removeBtn.textContent = 'Remove';
				removeBtn.classList.add('remove-btn');
				removeBtn.onclick = (e) => {

					// Prevent the upload event from triggering
					e.preventDefault();
					e.stopPropagation();

					// Remove the file from the fileArray
					fileArray = fileArray.filter((f) => f !== file);

					// Update the file input element with the remaining files
					const dataTransfer = new DataTransfer();
					fileArray.forEach((file) => dataTransfer.items.add(file));
					fileInput.files = dataTransfer.files;

					// Remove the preview from the UI
					preview.removeChild(div);
				};
				div.appendChild(removeBtn);

				preview.appendChild(div);
			};
			reader.readAsDataURL(file);
		});
			 }else{
				document.getElementById("imageList").style.display = "block";
			}

		});
	</script>

</body>

</html>
@* map api *@
<script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>
<link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css">

<script>
	const subscriptionKey = '6vAoTcX8f06OO59G3nxZnpomsOza1t6aO8jIQUQ3mFhur7lcuC45JQQJ99ALACYeBjFNNgXKAAAgAZMP4VXz'; // Replace with your Azure Maps subscription key
	let selectedLocation = null;

	// Initialize Azure Maps
	var map = new atlas.Map('mapContainer', {
		center: [101.6869, 3.139], // Default center: Kuala Lumpur, Malaysia (Longitude, Latitude)
		zoom: 12,
		authOptions: {
			authType: 'subscriptionKey',
			subscriptionKey: subscriptionKey
		}
	});

	// Add a click event to place a marker when the user clicks on the map
	map.events.add('click', function (e) {
		const coordinates = e.position;
		selectedLocation = coordinates;
		addMarker(coordinates);
		displayCoordinates(coordinates);
	});

	// Function to add a marker to the map
	function addMarker(coordinates) {
		var marker = new atlas.HtmlMarker({
			position: coordinates,
			popup: new atlas.Popup({
				content: '<h3>Selected Location</h3><p>Latitude: ' + coordinates[1] + '<br/>Longitude: ' + coordinates[0] + '</p>'
			})
		});
		map.markers.add(marker);
	}

	// Function to display coordinates in the form
	function displayCoordinates(coordinates) {
		document.getElementById('Location').value = `Latitude: ${coordinates[1]}, Longitude: ${coordinates[0]}`;
	}

	// Geocode address input and place a marker
	document.getElementById('searchButton').addEventListener('click', function () {
		const address = document.getElementById('Location').value;
		geocodeAddress(address);
	});

	// Function to geocode the address entered by the user
			function geocodeAddress(address) {
		if (!address.trim()) {
			alert('Please enter an address.');
			return;
		}

		const searchURL = `https://atlas.microsoft.com/search/address/json?subscription-key=${subscriptionKey}&api-version=1.0&query=${encodeURIComponent(address)}`;

		fetch(searchURL)
			.then(response => response.json())
			.then(data => {
				if (data.results && data.results.length > 0) {
					const coordinates = data.results[0].position;
					map.setCamera({ center: [coordinates.lon, coordinates.lat], zoom: 15 });
					addMarker({ longitude: coordinates.lon, latitude: coordinates.lat });
					displayCoordinates([coordinates.lon, coordinates.lat]);
				} else {
					alert('Address not found.');
				}
			})
			// .catch(err => {
			// 	console.error('Error during geocoding: ', err);
			// 	alert('An error occurred while searching for the address.');
			// });
	}

</script>
