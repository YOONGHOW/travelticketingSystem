@model PurchaseViewModel


<div class="container my-4 col-md-8 @((Model.Purchases.Count() < 3) ? "custom-width" : "")" style="max-width:1000px">
    @if (Model.Purchases.Count() == 0 || Model == null)
    {
        <div class="card mb-2">
            <div class="card-body" style="max-height：500px">

                <div class="d-flex justify-content-between align-items-center">
                    <div class="w-25 me-3">
                        <img src="~/images/no-order.png" alt="Product Image" class="img-fluid rounded"
                        onerror="this.onerror=null; this.src='~/images/error.png';">
                    </div>
                    <div>
                        <h3 class="card-title" style="padding:60px">No Purchases Record Found</h3><a>Click ->(To purchase right now !!)</a>
                    </div>
                </div>

            </div>
        </div>
    }
    @foreach (var s in Model.Purchases)
    {

        <!-- Order Card Example -->
        <div class="card mb-3">
            <div class="card-body" >

                <div class="row align-items-center">
                    <!-- Image Section -->
                    <div class="col-md-3 col-sm-12 text-center mb-3 mb-md-0">
                        <img src="@(s.PurchaseItems.Any(pi => pi.validDate.Date >= DateTime.Now.Date) ?
    (Model.Payment.FirstOrDefault(p => p.PurchaseId == s.Id)?.Status == "F" ? "/images/unchecked.png" : "/images/Unexpired.png") :
    "/images/expired.png")"
                        alt="Product Image"
                        class="img-fluid rounded"
                        style="max-width: 200px;"
                        onerror="this.onerror=null; this.src='@Url.Content("~/images/error.png")';">
                    </div>
                    <!-- Details Section -->
                    <div class="col-md-6 col-sm-12">
                        <h5 class="card-title">
                            @s.User.Name: @s.User.Email
                        </h5>
                        <p class="card-text text-muted">
                            Payment Date-Time: @s.PaymentDateTime.ToString("yyyy/MM/dd hh:mm tt")
                        </p>
                        @{
                            decimal total = 0;
                            decimal discount = 0;
                            if (!string.IsNullOrEmpty(s.PromotionId))
                            {
                                discount = s.Promotion.PriceDeduction * s.Amount;
                                total= discount+ s.Amount;

                            }
                            else
                            {
                                total = s.Amount;
                            }

                        }
                        <p class="card-text">
                            Purchase Price: <span class="ticket-price" data-base-price="@(total.ToString("F2"))">@(total.ToString("F2"))</span>
                        </p>
                        @(s.Status == "R" ? Html.Raw("<p class='text-danger'>(Cancelled Purchase: Refunded)</p>") : "")
                        @(s.Status == "M" ? Html.Raw("<p class='text-danger'>(Refund Purchase: Request)</p>") : "")
                        @if (!string.IsNullOrEmpty(s.PromotionId))
                        {
                            <p>Discount: RM @discount.ToString("F2")</p>
                       }
                        <p class="card-text ticket-price" data-base-price="@(s.Amount)">
                            Payment:@(s.Amount)
                        </p>
                    </div>
                    <!-- Actions Section -->
                    <div class="col-md-3 col-sm-12 text-end">
                        <button class="btn btn-primary btn-sm mb-2" data-bs-toggle="modal" data-bs-target="#detailModal" data-purchaseid="@s.Id">
                            Detail
                        </button>
                         <button class="btn btn-primary btn-sm mb-2"
                                data-bs-toggle="modal"
                                data-purchaseid="@s.Id"
                        @(s.Status == "R" || s.Status == "M" ? "style=display:none;" : "")
                        @(s.Status == "F" ? "style=display:none;" : "")
                                onclick="generateReceipt(this)">
                            E-Receipt
                        </button> 

                        <button class="btn btn-primary btn-sm mb-2"
                        @(s.Status == "F" ? "" : "style=display:none;")
                                onclick="window.location.href='/Client/ClientPayment?purchaseID=@s.Id'">
                            Payment
                        </button>
                        <button class="btn btn-danger btn-sm mb-2  @(s.Status == "S" ? " cancel-purchase " : "cancel-payment")"
                        @(s.Status == "R" || s.Status == "M" || s.PurchaseItems.Any(pi => pi.validDate.Date < DateTime.Now.Date) ? "style=display:none;" : "")
                                data-purchaseid="@s.Id">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>

    }



</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
       let count1 = 0;  // For cancel purchase
    let count2 = 0;  // For cancel payment

    // Cancel Purchase Handler
    $(document).on("click", ".cancel-purchase", function (event) {
        event.preventDefault(); // Prevent default form submission or link behavior
        console.log("Cancel Purchase Clicked");

        const purchaseId = $(this).data("purchaseid");  // Get purchase ID from the clicked element
        if (!purchaseId) {
            alert("Invalid Purchase ID!");  // If no purchase ID, show error message
            return;
        }

        const message = "Are you certain you want to cancel the purchase?";  // Confirmation message

        // Check if confirm dialog was accepted and if the count is less than 1
        if (confirm(message) && count1 < 1) {
            count1++;  // Increment count1 to prevent further requests

            $.ajax({
                url: '/Client/RefundPurchaseRequest',  // Adjust URL if needed
                type: 'POST',
                data: { purchaseID: purchaseId },  // Send purchase ID to the server
                success: function (response) {
                    if (response.success) {
                        alert(response.message);  // Show success message
                        location.reload();  // Optionally reload the page to reflect changes
                    } else {
                        alert(response.message);  // Show failure message
                    }
                },
                error: function () {
                    alert("An error occurred while processing the request.");  // Handle AJAX errors
                }
            });
        } else {
            console.log("Purchase cancellation canceled.");
        }
    });

    // Cancel Payment Handler
    $(document).on("click", ".cancel-payment", function (event) {
        event.preventDefault(); // Prevent default form submission or link behavior
        const purchaseId = $(this).data("purchaseid");  // Get purchase ID from the clicked element
        if (!purchaseId) {
            alert("Invalid Purchase ID!");  // If no purchase ID, show error message
            return;
        }

        const message = "Are you certain you want to cancel the payment?";  // Confirmation message
        if (confirm(message) && count2 < 1) {
            count2++;  // Increment count2 to prevent further requests

            $.ajax({
                url: '/Client/DeletePayment',  // Adjust URL if needed
                type: 'POST',
                data: { purchaseID: purchaseId },  // Send purchase ID to the server
                success: function (response) {
                    if (response.success) {
                        alert(response.message);  // Show success message
                        location.reload();  // Optionally reload the page to reflect changes
                    } else {
                        alert(response.message);  // Show failure message
                    }
                },
                error: function () {
                    alert("An error occurred while processing the request.");  // Handle AJAX errors
                }
            });
        } else {
            console.log("Payment cancellation canceled.");
        }
    });



        function generateReceipt(button) {
        // Get the purchase ID from the button's data-purchaseid attribute
        const purchaseId = button.getAttribute('data-purchaseid');
        const dateText = document.querySelector('.card-text.text-muted').textContent;
        // Log the purchase ID for debugging (optional)
        console.log('Generating receipt for Purchase ID:', purchaseId);

        // Make an AJAX call to the server to generate the receipt
        fetch(`/Admin/GenerateInvoice?purchaseID=${purchaseId}`, {
            method: 'GET',
        })
        .then(response => {
            if (response.ok) {
                return response.blob(); // Receive the PDF as a blob
            } else {
                throw new Error('Failed to generate receipt.');
            }
        })
        .then(blob => {
            // Create a link element to download the receipt
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `Receipt_${dateText}.pdf`;
            link.click();
            window.URL.revokeObjectURL(url); // Clean up the URL object
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to generate receipt. Please try again later.');
        });
    }
</script>
