@{
	Layout = "_ClientLayout";
}

@model AttractionUpdateVM


<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="/css/ClientCss/ClientAttraction.css" asp-append-version="true">
</head>
<body>
</body>
</html>

<main style="min-height: 500px;">
	<div class="attaraction_details">
		<h1>@Model.Name</h1><br />
		<p style="font-size:18px;">
			@Model.Description<br /> <br />
			@if (ViewBag.Feedbacks.Count == 0)
			{
			<p>No review yet.</p>
			}
			else
			{

				int total = 0;
				double averageRating = 0.0;
				foreach (var f in ViewBag.Feedbacks)
				{
					total += f.Rating;
				}

				averageRating = (double)total / ViewBag.Feedbacks.Count;

			<div class="review-container">
				<p class="review-head">⭐@averageRating.ToString("F1") (@ViewBag.Feedbacks.Count reviews)</p>
				<br />
				<p class="location">📍@Model.Location</p>

			</div>
			}
		<br /><div class="container">
			<div class="image-section">
					@if (Model.Photo.imagePaths.Count() == 1)
					{


					<img src="/attractionImages/@Model.ImagePath" alt="@Model.Name" class="detailsImg">


					}
					else
					{

					<div class="slideshow-container">
						<!-- Full-width images with number and caption text -->
							@for (int i = 1; i <= Model.Photo.imagePaths.Count; i++)
							{
							<div class="mySlides fade">
								<div class="numbertext">@i / @Model.Photo.imagePaths.Count</div>
								<img src="/attractionImages/@Model.Photo.imagePaths[i-1]" style="width:70%">
								<div class="text"></div>
							</div>
							}


						<!-- Next and previous buttons -->
						<a class="prev" onclick="plusSlides(-1)">&#10094;</a>
						<a class="next" onclick="plusSlides(1)">&#10095;</a>

						<!-- The dots/circles -->
						<div style="text-align:center" class="dots">
								@for (int i = 1; i <= Model.Photo.imagePaths.Count; i++)
								{
								<span class="dot" onclick="currentSlide(@i)"></span>
								}
						</div>
					</div>

					<br />
					}
			</div>

			<!-- Map container -->
			<div class="map-section">
				<div id="mapContainer" style="width: 100%; height: 400px;"></div>
			</div>
		</div>
		<div class="container">
			<!-- Left Side: Package Option -->
			<div class="left-side">
				<h2>Package Option</h2><br />
				<form asp-action="AddMultipleToCart" method="post">
						@{
							var loopIndex = 0;
						}
						@foreach (var ticket in ViewBag.Tickets as List<TicketVM>)
						{


						<div class="ticket-box">
							<p style="font-size:18px;"><b>@ticket.ticketName</b></p>
							<table class="tableTicketDetails">
								<tr>
									<td><b>@ticket.ticketType</b></td>
									<td style="font-size:18px;"><b><span>RM </span>@ticket.ticketPrice</b></td>
									<td>
										<label for="quantity_@ticket.Id" class="qty"><b>Quantity:</b></label>
										<input type="number" id="quantity_@ticket.Id" name="tickets[@loopIndex].Quantity" value="0" min="0" max="@ticket.stockQty" />
										<input type="hidden" name="tickets[@loopIndex].TicketId" value="@ticket.Id" />
									</td>
								</tr>
							</table>
						</div>
							loopIndex++;
						}
					<audio id="myAudio" preload="auto">
						<source src="/sound/button.wav" type="audio/wav">
					</audio>
					<button onclick="handleButtonClick(event)" type="submit" class="addCartBtn">Add to Cart</button>

					<script>
						function handleButtonClick(event) {
						  event.preventDefault();
						  var audio = document.getElementById("myAudio");
						  var form = event.target.closest('form');
						  audio.playbackRate = 2;
						  audio.play();

						  audio.onended = function () {
							form.submit();
						  };
						}
					</script>
				</form>
			</div>

			<!-- Right Side: Operating Hours -->
			<div class="right-side">
				<h4 style="font-size:20px;"><b>Operating Hours</b></h4><br />
				<table>
						@foreach (var op in Model.operatingTimes)
						{
							string operateDetail = "";

							if (op.Status.Equals("open"))
							{
								operateDetail += " " + op.StartTime + " - " + op.EndTime;
							}
							else
							{
								operateDetail += " Closed";
							}

						<tr class="operating_time">
							<th>@op.Day</th>
							<td style="padding-left:50px;">@operateDetail</td>
						</tr>
						}
				</table>
			</div>
		</div>



	</div>
	<!-- Review Section -->
	<section class="review-section">
		<h2>Most Recent Reviews</h2>
		@if (ViewBag.Feedbacks.Count == 0)
		{
			if (ViewBag.User != null)
			{
				<button id="add-review-btn" data-get="/Client/ClientFeedbackForm?attractionId=@Model.Id">Add Review</button>
			}

			<p>No review yet.</p>
		}
		else
		{

			int total = 0;
			double averageRating = 0.0;
			foreach (var f in ViewBag.Feedbacks)
			{
				total += f.Rating;
			}

			averageRating = (double)total / ViewBag.Feedbacks.Count;

			<p class="review-summary">@averageRating.ToString("F1") / 5 <span class="stars" data-rating="@averageRating.ToString("F1")" style="width: @averageRating.ToString("F1") * 20%;"></span> Based on @ViewBag.Feedbacks.Count review(s)</p>

			<!-- Add Review Button -->
			if (ViewBag.User != null)
			{
				<button id="add-review-btn" data-get="/Client/ClientFeedbackForm?attractionId=@Model.Id">Add Review</button>
			}
			<div class="review-cards">
				@foreach (var f in ViewBag.Feedbacks)
				{
					<div class="review-card">
						<div class="review-score">
							<div class="stars" data-rating="@f.Rating"></div>
							<span class="score-label">@f.Rating.0 / 5</span>
						</div>
						<div class="review-details">
							<div class="review-user">
								<strong>Siti</strong>
							</div>
							<ul class="review-meta">
								<li>👪 @f.commentDetail.Partner</li>
								<li>🤷‍♂ @f.commentDetail.Reason</li>
							</ul>
							<div class="review-comment">
								<h4>@f.commentDetail.Title</h4>
								<p>@f.commentDetail.Review</p>
								<span class="review-date">Written @f.SubmitDate</span>
							</div>
							<br />
							@if (f.feedbackReplyList.Count != 0)
							{
								<div>
									<a id="viewComment" href="">View @f.feedbackReplyList.Count more replies</a>
								</div>
							}
							<div id="replyList" style="display: none;">
								@if (f.feedbackReplyList.Count != 0)
								{
									@foreach (var fr in f.feedbackReplyList)
									{
										<div class="review-header" data-comment-id="@fr.Id">
											<div class="user-info">
												<img src="/images/miyabi.jpeg" alt="User" class="user-image">
												<div class="details">
													<span class="user-name">Miyabi Admin</span>
												</div>
											</div>
										</div>
										<span class="review-text">@fr.Comment</span>
									}
								}

							</div>
						</div>

					</div>
				}

			</div>
		}
	</section>
</main>
<script>

	document.addEventListener('DOMContentLoaded', function () {
		const viewCommentButtons = document.querySelectorAll('#viewComment');

		// View Comment Button Logic
		viewCommentButtons.forEach(button => {
			button.addEventListener('click', function (event) {
				event.preventDefault(); // Prevent the default action of the <a> tag
				const replyListDiv = this.closest('.review-card').querySelector('#replyList');
				if (replyListDiv) {
					replyListDiv.style.display = (replyListDiv.style.display === 'none' || replyListDiv.style.display === '')
						? 'block'
						: 'none';
				}
			});
		});
	});

</script>
<script>
		document.querySelectorAll('.stars').forEach(function(starElement) {
		let rating = starElement.getAttribute('data-rating');
		let ratingRounded = Math.round(rating);
		starElement.setAttribute('data-rating', ratingRounded); // round to nearest integer (1-5)
	});
</script>
<script>
		let slideIndex = 1;
	showSlides(slideIndex);

	// Next/previous controls
	function plusSlides(n) {
	  showSlides(slideIndex += n);
	}

	// Thumbnail image controls
	function currentSlide(n) {
	  showSlides(slideIndex = n);
	}

	function showSlides(n) {
	  let i;
	  let slides = document.getElementsByClassName("mySlides");
	  let dots = document.getElementsByClassName("dot");
	  if (n > slides.length) {slideIndex = 1}
	  if (n < 1) {slideIndex = slides.length}
	  for (i = 0; i < slides.length; i++) {
		slides[i].style.display = "none";
	  }
	  for (i = 0; i < dots.length; i++) {
		dots[i].className = dots[i].className.replace(" active", "");
	  }
	  slides[slideIndex-1].style.display = "block";
	  dots[slideIndex-1].className += " active";
	}
</script>
@* map api *@
<script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>
<link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css">

<script>
	document.addEventListener('DOMContentLoaded', function () {
		// Get the location from the Razor model
		const modelLocation = "@Model.Location"; // Razor will replace this with the model's Location property

		// If a location exists in the model, geocode it
		if (modelLocation) {
			geocodeAddress(modelLocation);
		} else {
			console.error("Model location is not available.");
		}
	});

	// Replace with your Azure Maps subscription key
	const subscriptionKey = '6vAoTcX8f06OO59G3nxZnpomsOza1t6aO8jIQUQ3mFhur7lcuC45JQQJ99ALACYeBjFNNgXKAAAgAZMP4VXz';

	// Initialize Azure Maps
	let map = new atlas.Map('mapContainer', {
		center: [100.3327, 5.4164], // Default center (Penang, Malaysia)
		zoom: 12,
		authOptions: {
			authType: 'subscriptionKey',
			subscriptionKey: subscriptionKey
		}
	});

		function cleanAddress(address) {
		// Remove unnecessary details and just use the building and city name
		return address.replace(/Lower Ground \(Concourse\) Level, /, '').replace(/\s+/g, ' ').trim();
	}

	// In the geocodeAddress function:
	function geocodeAddress(address) {
		const cleanedAddress = cleanAddress(address);

		const searchURL = `https://atlas.microsoft.com/search/address/json?subscription-key=${subscriptionKey}&api-version=1.0&query=${encodeURIComponent(cleanedAddress)}`;

		fetch(searchURL)
			.then(response => response.json())
			.then(data => {
				if (data.results && data.results.length > 0) {
					const coordinates = data.results[0].position; // Extract coordinates (latitude, longitude)

					if (coordinates && coordinates.lat && coordinates.lon) {
						map.setCamera({
							center: [coordinates.lon, coordinates.lat],
							zoom: 15
						});

						// Add a marker at the geocoded location
						addMarker([coordinates.lon, coordinates.lat]);
					} else {
						console.error('No coordinates found for the address:', cleanedAddress);
					}
				} else {
					console.error('No results found for the address:', cleanedAddress);
				}
			})
			.catch(err => {
				console.error('Error during geocoding:', err);
			});
	}


	// Function to add a marker to the map
	function addMarker(coordinates) {
		const marker = new atlas.HtmlMarker({
			position: coordinates,
			popup: new atlas.Popup({
				content: `<h3>Location</h3><p>Latitude: ${coordinates[1]}<br/>Longitude: ${coordinates[0]}</p>`
			})
		});

		// Add the marker to the map
		map.markers.add(marker);
	}
</script>

