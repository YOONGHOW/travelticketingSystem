@{
	Layout = "_ClientLayout";
	ViewBag.Title = "Client | Attraction";
}

@model IEnumerable<AttractFeedback>

<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="/css/ClientCss/ClientAttraction.css" asp-append-version="true">

</head>
<body>
</body>
</html>
<main style="min-height: 600px;">
	<p class="introduction">
		From local escapes to far-flung adventures, find what makes you happy anytime, anywhere
	</p>
	<section>
		<nav class="prod_side">
			<form method="POST"
				  data-ajax="true"
				  data-ajax-update="#target"
				  data-ajax-loading="#loader"
				  id="filterForm">
				@Html.TextBox("name", "",
									new { type = "search", autofocus = "", data_trim = "", id = "search_prod", placeholder = "Search..." })
				<br><br>
				<label>Filter by Price : </label><br><br>
				<input type="submit" name="sort" id="priceBtn" value="dec" /> <br><br>
				<input type="submit" name="sort" id="priceBtn" value="asc">


				<select name="category" id="category">
					<option value="all">All</option>
					@foreach (var at in ViewBag.AttractionTypes)
					{
						<option value="@at.Id">@at.Name</option>
					}
				</select>
				<img src="/images/loader.gif" id="loader" style="display: none" />
				<button>Search</button>
			</form>
		</nav>

		<div class="productList" id="target">
			<partial name="_ClientAttraction" />
		</div>
	</section>
</main>

@section foot {
	<script>
		let timer = null;

		$('#search_prod').on('input', e => {
		clearTimeout(timer);
		timer = setTimeout(() => $(e.target.form).submit(), 500);
		});
	</script>
	<script>
				document.addEventListener("DOMContentLoaded", function () {
			const form = document.getElementById('filterForm');
			const categorySelect = document.getElementById('category');
			const resultContainer = document.getElementById('target');

			// Event listener for change event on the select tag
			categorySelect.addEventListener('change', function () {
				// Create a FormData object to capture form data
				const formData = new FormData(form);

				// Optional: Show a loading message or spinner
				resultContainer.innerHTML = '<p>Loading...</p>';

				// Send the form data via AJAX using fetch
				fetch(form.action, {
					method: form.method,
					body: formData,
				})
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						return response.text(); // Assuming the server returns HTML
					})
					.then(html => {
						// Inject the resulting HTML into the result container
						resultContainer.innerHTML = html;
					})
					.catch(error => {
						console.error('Error during AJAX request:', error);
						resultContainer.innerHTML = '<p>An error occurred. Please try again later.</p>';
					});
			});
		});
	</script>
}

