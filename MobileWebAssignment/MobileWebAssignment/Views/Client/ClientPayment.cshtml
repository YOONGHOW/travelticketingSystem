@model PaymentVM

@{
    Layout = "_ClientLayout";
    ViewBag.Title = "Client | Payment";
    var userInfo = ViewBag.UserInfo as Member;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/js/Paypal.js" type="text/javascript" defer></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <title>Payment Page</title>
    <script src="https://www.paypal.com/sdk/js?client-id=AZcS3pdbVUWyMLj-vHkZd-6nbwdyosowOUOZ8qsmy6ibUjYY8PilqXUMANBLJu5XlQRP7ZTVI5ojZsdE&disable-funding=card"></script>

    <style>
        html body {
        background-color: #0d131a;
        }

        .user_image img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        }

        .loadpage {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background-color: rgba(255, 255, 255, 0.9);
        z-index: 1050;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        }

        .loadpage img {
        width: 100px;
        margin-bottom: 15px;
        }

        .orderContainer:hover {
        background-color: black;
        }

        #productImage{
        width:400px;
        height:250px;
        }

        .text-danger{
        margin-top:0;
        padding-top:0;
        }
    </style>
</head>
<body>
    @* <div class="loadpage d-flex"> *@
    @*     <img src="/images/loading.gif" alt="Loading"> *@
    @*     <p>Connection...</p> *@
    @* </div> *@

    <div class="container my-5">
        <div class="row rounded-3" style="box-shadow: 10px 10px 10px #fbf6f6;background-color: #eeebeb;">
            <!-- Left Panel -->
            <div class="col-md-6 p-4 rounded-3" style="background-color: #eeebeb;">
                <div class="d-flex align-items-center mb-4">
                    <img src="/images/@userInfo?.PhotoURL" alt="User" class="me-2"
                    onerror="this.onerror=null; this.src='/images/error.png';" style="width: 40px; height: 40px; border-radius: 100%;">
                    <p class="mb-0">@userInfo?.Name</p>
                </div>

                <div class="productDetail mb-4">
                    <div class="mb-3">
                        <p id="productName">Product Name</p>
                        <p id="productPrice">Product Price</p>
                    </div>
                    <div>
                        <img id="productImage" src="https://picsum.photos/400/250" alt="Product Image" class="img-fluid rounded">
                    </div>
                </div>

                <div class="overflow-auto" style="max-height: 230px;">
                    @{
                        int count = 1;
                    }
                    @foreach (var s in ViewBag.CartItems)
                    {

                        <div class="orderContainer@(count) orderContainer p-3 rounded mb-2" style="background-color:#b6b6b6;cursor: pointer"
                        onclick="updateProductDetail(this,'@s.Ticket.ticketName', '@s.Ticket.ticketPrice', '@s.imagepath')">
                            <p class="form-control-plaintext fw-bold">@s.Ticket.ticketName</p>
                            <p class="form-control-plaintext text-end ticketPrice"><span class="ticket-price" data-base-price="@s.Subtotal">@s.Subtotal</span></p>
                            <p class="form-control-plaintext">x @s.Quantity</p>
                            <input type="hidden" value="@s.imagepath" />
                            <p class="form-control-plaintext "><span class="ticket-price" data-base-price="@s.Ticket.ticketPrice"> @s.Ticket.ticketPrice</span></p>
                        </div>
                    }
                </div>
            </div>

            <!-- Right Panel -->
            <div class="col-md-6 p-4" style="border-radius: 0 10px 10px 0 ; background-color: #e3e0e0;">
                <h5>Payment Details</h5>
                <p class="text-muted">Complete your purchase by providing your payment details</p>

                <form method="post">
                    <div asp-validation-summary="ModelOnly"></div>
                    <div class="mb-3">
                        <label asp-for="Email" class="form-label">Email Address</label>
                        <input asp-for="Email"  type="email" id="paymentEmail" class="form-control" placeholder="e.g. user@example.com" autofocus>
                        <span asp-validation-for="Email" class="text-danger form-control " style="background:none"></span>
                    </div>

                    <div class="mb-3">
                        <label for="paymentMethod" class="form-label">Payment Method</label>
                        <select id="paymentMethod" class="form-select">
                            <option value="card">Bank Card</option>
                            <option value="paypal">PayPal</option>
                        </select>
                    </div>
                    <div id="cardDetailsSection" class="mb-3" style="display: none;">
                        <div class="mb-3">
                            <label asp-for="CardNumber" for="cardNumber" class="form-label">Card Details</label>
                            <input asp-for="CardNumber" type="text" id="cardNumber" class="form-control" placeholder="Card Number">
                            <span asp-validation-for="CardNumber" class="text-danger form-control " style="background:none"></span>
                            <div class="d-flex">
                                <input asp-for="ExpirationDate" type="text" id="expDate" class="form-control me-2" placeholder="MM/YY" maxlength="5">

                                <input asp-for="CVV" type="password" id="cvv" class="form-control" placeholder="CVV" maxlength="3">

                            </div>
                            <div class="d-flex" >
                                <span asp-validation-for="ExpirationDate" id="validationofDate" class="text-danger form-control me-2 " style="background:none"></span>
                                <span asp-validation-for="CVV" class="text-danger  form-control " style="background:none"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="CardholderName" for="cardHolderName" class="form-label">Cardholder Name</label>
                            <input asp-for="CardholderName"  type="text" id="cardHolderName" class="form-control" placeholder="Cardholder Name">
                            <span asp-validation-for="CardholderName" class="text-danger form-control " style="background:none"></span>
                        </div>
                    </div>

                    <div class="paymentCalculation mb-3">
                        <div class="d-flex justify-content-between">
                            <label for="subtotalcal">Subtotal</label>
                            <input type="text" id="subtotalcal" class="form-control-plaintext text-end ticket-price" value="00.00" data-base-price="" readonly>

                        </div>
                        <div class="d-flex justify-content-between">
                            <label for="shiping" style="min-width:100px">Process Fee</label>
                            @{
                                var tax = 4.9;
                            }
                            <span id="shiping" class="ticket-price" data-base-price="@tax">@tax</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <label for="discount">Discount</label>
                            <div class="d-flex align-items-center">
                                <span id="discount-error" style="display:none; margin-left: 10px;">asd</span>
                                <input type="text" id="discount" class="form-control-plaintext text-end" value="" placeholder="Code" style="background-color:white;max-width:150px;height:30px;border-radius:5px;padding:10px">
                            <input asp-for="DiscountID"  id="discountID" type="hidden" value=""/>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between fw-bold">
                            <label for="totalcal">Total</label>
                            <input type="text" id="totalcal" class="form-control-plaintext text-end" value="00.00" readonly>
                        </div>
                        
                    </div>
                    @{
                        // Safely get the item count from ViewBag.CartItems
                        int itemCount = (ViewBag.CartItems as List<CartPaymentVM>)?.Count ?? 0;

                        // Determine if the button should be disabled
                        var isDisabled = itemCount == 0; // Disable if no items in the cart
                    }
                    <button class="btn btn-primary w-100" disabled="@isDisabled" id="payButton" style="display: none;">Pay 00.00 </button>
                    <div id="paypalbutton">
                        <div id="paypal-button-container">
                        </div>
                    </div>
                    
                </form>

            </div>
        </div>
    </div>
    <script>
       

        document.addEventListener('DOMContentLoaded', () => {
        const urlParams = new URLSearchParams(window.location.search);

        // Extract the purchaseID parameter
        const purchaseID = urlParams.get('purchaseID');

        if(purchaseID){
            paymentMethodSelect.innerHTML = '<option value="card">Bank Card</option>';
        }


            // Select the first container
            const firstContainer = document.querySelector('.orderContainer1');

            // If a container exists, simulate a click event
            if (firstContainer) {
                updateProductDetail(
                    firstContainer,
                    firstContainer.querySelector('.fw-bold').textContent, // Assuming name is in this class
                    firstContainer.querySelector('.text-end').textContent, // Assuming price is in this class
                    firstContainer.querySelector('input[type="hidden"]').value // Assuming image path is stored here
                );

                // Apply the border to indicate it's selected
                firstContainer.style.border = '2px solid black';
            }
        });

              function updateProductDetail(container, name, price, imagePath) {
            // Remove border from all containers
            var containers = document.querySelectorAll('.orderContainer');
            console.log(containers);
            containers.forEach(function (el) {
               el.style.border = '';
            });

            // Update product name
            document.getElementById('productName').textContent = name;

            // Update product price
            document.getElementById('productPrice').textContent = price;

            // Update product image
            document.getElementById('productImage').src = imagePath;
                productImage.onerror = function () {
            this.src = '/images/error.png';  // Set a default image if the original fails
        };
            // Add border to the clicked container
            container.style.border = '2px solid black';
        }

              // Function to calculate the subtotal
        function calculateSubtotal() {
            let total = 0;

            // Loop through each order container to get ticket prices
            document.querySelectorAll('.orderContainer').forEach(function (container) {
                // Get the ticket price from the container
                const ticketPriceElement = container.querySelector('.ticketPrice');
                const ticketPrice = parseFloat(ticketPriceElement.innerText.trim()); // Remove 'RM' and parse as float
                total += ticketPrice; // Add the price to the total
            });

            // Update the subtotal field with the calculated total
            const subtotalField = document.getElementById('subtotalcal');
            subtotalField.value = total.toFixed(2); // Format the total to 2 decimal places
        }

       
            function updateTotal() {
            // Get the current subtotal and shipping fee values
            var subtotal = parseFloat(document.getElementById('subtotalcal').value.trim());
            var shippingFee = parseFloat(document.getElementById('shiping').textContent.trim());

            // Calculate the total
            var total = subtotal + shippingFee;
            var payButton = document.getElementById('payButton');
            // Update the totalcal input with the calculated total
            document.getElementById('totalcal').value = total.toFixed(2);
         
            payButton.innerText = 'Pay  ' + total.toFixed(2);

        }

         // Call the calculateSubtotal function when the page loads
        window.onload = function () {
            calculateSubtotal();
            updateTotal(); // Update the total based on the shipping fee
        };
        //==================================================
        // Payment selection
        //==================================================

        const paymentMethodSelect = document.getElementById("paymentMethod");
        const cardDetailsSection = document.getElementById("cardDetailsSection");
        const payButton = document.getElementById("payButton");
        const paypalSection = document.getElementById("paypalbutton");
       

        // Listen for changes in the payment method select
        paymentMethodSelect.addEventListener("change", function () {
                   if (this.value === "card") {
            // Show card details section and pay button if 'Bank Card' is selected
            cardDetailsSection.style.display = "block";
            payButton.style.display = "block";
            paypalSection.style.display = "none"; // Hide PayPal button
        } else if (this.value === "paypal") {
            // Show PayPal button if 'PayPal' is selected
            paypalSection.style.display = "block";
            cardDetailsSection.style.display = "none"; // Hide card details section
            payButton.style.display = "none"; // Hide the Pay button
        }

        });

        // Initialize visibility based on default selection
        if (paymentMethodSelect.value === "card") {
            cardDetailsSection.style.display = "block";
                payButton.style.display = "block";
                 paypalSection.style.display = "none";
        } else {
            cardDetailsSection.style.display = "none";
                 payButton.style.display = "none";
                  paypalSection.style.display = "block";
        }
     

        //card expired validation
                  document.getElementById("expDate").addEventListener("blur", function () {
            const expDate = this.value;
            const validationMessage = document.getElementById("validationofDate");

            if (expDate.length === 5 && /^(0[1-9]|1[0-2])\/([0-9]{2})$/.test(expDate)) {
                const currentDate = new Date();
                const currentYear = currentDate.getFullYear();
                const currentMonth = currentDate.getMonth() + 1; // Months are 0-indexed

                const [expMonth, expYear] = expDate.split('/');
                const expMonthInt = parseInt(expMonth, 10);
                const expYearInt = 2000 + parseInt(expYear, 10); // Assuming YY is in 20YY format

                if (expYearInt < currentYear || (expYearInt === currentYear && expMonthInt < currentMonth)) {
                    validationMessage.textContent = "The card has expired."; // Set the validation message
                } else {
                    validationMessage.textContent = ""; // Clear the validation message
                }
            } else {
                validationMessage.textContent = "Invalid expiration date format. Must be in MM/YY."; // Invalid format
            }
        });

        const discountInput = document.getElementById("discount");

              discountInput.addEventListener("blur", function() {
            if (!discountInput.readOnly) {
                checkDiscountCode();
            }
        });

        // Add event listener for Enter key
        discountInput.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); // Prevent default form submission if inside a form
                checkDiscountCode();
            }
        }); 

        //discound code validation
               function checkDiscountCode() {
            const discountInput = document.getElementById("discount"); // The input field
            const errorMessage = document.getElementById("discount-error"); // Error message element
            const discountID = document.getElementById("discountID"); // The input field

            // Reset the error message
            errorMessage.style.display = 'none';
            const discountCode = discountInput.value.trim().toUpperCase();
            if (discountInput.value.length >= 3) { // Start validation when the code length reaches 3 characters
                $.ajax({
                    url: '/Client/CheckDiscountCode', // URL to the controller's action
                    type: 'GET',
                    data: { code: discountCode}, // Send the discount code to the server
                    success: function (response) {
                        if (response.isValid) {
                            // Code exists in DB, hide the error message (if any)
                            errorMessage.style.display = 'block';
                            errorMessage.textContent = response.message;
                            discountInput.value = response.priceDeduction; // Update input with price deduction
                            discountInput.readOnly = true;
                            discountID.value= response.promotionID;
                            discountInput.blur();
                            discountInput.style.padding = '0';
                            errorMessage.style.color = "black";
                            updateTotalDiscount(response.priceDeduction);
                        } else {
                            // Code doesn't exist, show error message
                            errorMessage.style.display = 'block';
                            errorMessage.style.color = "red";
                            errorMessage.textContent = "Invalid discount code.";
                        }
                    },
                    error: function () {
                        // Handle errors (optional)
                        errorMessage.style.display = 'block';
                        errorMessage.style.color = "red";
                        errorMessage.textContent = "An error occurred while validating the code.";
                    }
                });
            }
        }

        //====================
        //Update Discount price
        //====================
                  function updateTotalDiscount(priceDeduction) {
            // Get the subtotal value and remove the "RM" prefix, then convert to float
            let subtotal = parseFloat(document.getElementById("subtotalcal").value.replace('RM', '').trim());

            // Get the shipping fee value and remove the "RM" prefix, then convert to float
            let shippingFee = parseFloat(document.getElementById("shiping").value.replace('RM', '').trim());

            // Initialize discount amount
            let discountAmount = 0; // Amount to deduct from subtotal

            // Calculate the discount amount based on priceDeduction
            if (priceDeduction) {
                discountAmount = (subtotal+shippingFee) * (priceDeduction); // Calculate the discount amount
            }

            // Calculate the total: Subtotal + Shipping Fee, then apply the discount
            let total = (subtotal + shippingFee) - discountAmount;

            // Update the discount input with the discount amount
            const discountInput = document.getElementById("discount");
            discountInput.value = 'RM ' + discountAmount.toFixed(2); // Show the deducted amount

            // Update the totalcal field with the calculated total
            document.getElementById('totalcal').value = 'RM ' + total.toFixed(2);

            // Optionally, update the pay button text
            const payButton = document.getElementById("payButton");
            payButton.innerText = 'Pay RM ' + total.toFixed(2);
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

